version: 2
jobs:
  deploy:
    machine:
      enabled: true
    steps:
      - add_ssh_keys:
          fingerprints:
            - "24:43:f9:ad:3d:b1:7a:5f:ef:ca:df:a3:f2:4b:7a:29"
      - run:
         command: |
           scp -p ${SSH_PORT} ~/git/github/favorite_videos/.env ${USER_NAME}@${HOST_NAME}:/var/www/app
           ssh -p ${SSH_PORT} ${USER_NAME}@${HOST_NAME} "/var/www/app/scripts/deploy.sh"

  test:
    docker:
      # specify the version you desire here
      - image: circleci/ruby:2.7.1-node-browsers
        environment:
          RAILS_ENV: test
          DATABASE_HOST: 127.0.0.1
          DATABASE_USER: 'root'
          DATABASE_PASSWORD: ''
          DATABASE_TEST: 'favorite_videos_test'
      - image: circleci/mysql:5.7

    working_directory: ~/app

    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
          - v1-dependencies-{{ checksum "Gemfile.lock" }}
          # fallback to using the latest cache if no exact match is found
          - v1-dependencies-

      - run:
          name: install dependencies
          command: |
            gem install bundler:1.17.3
            bundle install --jobs=4 --retry=3 --path vendor/bundle

      - save_cache:
          paths:
            - ./vendor/bundle
          key: v1-dependencies-{{ checksum "Gemfile.lock" }}

      - run:
          name: Wait for DB
          command: dockerize -wait tcp://127.0.0.1:3306 -timeout 120s

      # Database setup
      - run: bundle exec rake db:create
      - run: bundle exec rake db:schema:load

      # run tests!
      - run:
          name: run tests
          command: |
            mkdir /tmp/test-results
            TEST_FILES="$(circleci tests glob "spec/**/*_spec.rb" | circleci tests split --split-by=timings)"

            bundle exec rspec --format progress \
                            --format RspecJunitFormatter \
                            --out /tmp/test-results/rspec.xml \
                            --format progress \
                            $TEST_FILES

      # collect reports
      - store_test_results:
          path: /tmp/test-results
      - store_artifacts:
          path: /tmp/test-results
          destination: test-results


workflows:
  version: 2
  deploy:
    jobs:
      - test
      - deploy:
          requires:
              - test
          filters:
            branches:
              only: master
